{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","OperatorKind","QueuedExport","QueuedImport","TypeAlias","operatorKindFromString","str","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","DIV","REM","POW","AND","OR","XOR","EQ","NE","GT","GE","LT","LE","INVALID","ElementKind","CommonFlags","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","getSource","normalizedPath","k","length","source","lookupSourceByPath","normalizedPathWithoutExtension","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedExtends","queuedImplements","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","assert","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","INTERFACE_PROTOTYPE","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","filterDecorators","decorators","acceptedFlags","presentFlags","NONE","decorator","IDENTIFIER","flag","decoratorKindToFlag","stringToDecoratorKind","Duplicate_decorator","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","GLOBAL","is","BUILTIN","isLibrary","SOURCE","globalName","namespace","fileLevelInternalName","simpleName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","decoratorFlags","OPERATOR","INLINE","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","decoratorKind","DecoratorKind","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","toString","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","localName","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","elementExpression","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","explicitLocal","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NAMESPACE","ENUM","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","create","addLocal","getTempLocal","wrapped","temps","toNativeType","NativeType","I32","I64","F32","F64","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_j","_k","_l","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","enterBranchOrScope","branch","slice","leaveBranchOrScope","_b","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritMutual","left","right","leftExt","rightExt","thisExt","minLength","min","canOverflow","expr","operand","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","CUSTOM","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","g","eval","e","window","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","cachedNullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","features","hasFeature","feature","Feature","ConversionKind","WrapMode","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","_e","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","count","Nop","blockFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysTrue","compileExpressionRetainType","condPre","incrExpr","bodyExpr","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifFalseFlow","ifTrueExpr","ifFalseExpr","context","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","fallsThrough","nextLabel","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","argumentExpressions","thisArg","compileCallDirect","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueExpr","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenType","ifElseType","ifThenAllocates","ifElseAllocates","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Return","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","compiler","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray"],"mappings":"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AM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  ParameterKind,\r\n  SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  stringToDecoratorKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n  INDEXED_GET,\r\n  INDEXED_SET,\r\n  UNCHECKED_INDEXED_GET,\r\n  UNCHECKED_INDEXED_SET,\r\n  ADD,\r\n  SUB,\r\n  MUL,\r\n  DIV,\r\n  REM,\r\n  POW,\r\n  AND,\r\n  OR,\r\n  XOR,\r\n  EQ,\r\n  NE,\r\n  GT,\r\n  GE,\r\n  LT,\r\n  LE\r\n}\r\n\r\nfunction operatorKindFromString(str: string): OperatorKind {\r\n  switch (str) {\r\n    case \"[]\" : return OperatorKind.INDEXED_GET;\r\n    case \"[]=\": return OperatorKind.INDEXED_SET;\r\n    case \"{}\" : return OperatorKind.UNCHECKED_INDEXED_GET;\r\n    case \"{}=\": return OperatorKind.UNCHECKED_INDEXED_SET;\r\n    case \"+\"  : return OperatorKind.ADD;\r\n    case \"-\"  : return OperatorKind.SUB;\r\n    case \"*\"  : return OperatorKind.MUL;\r\n    case \"/\"  : return OperatorKind.DIV;\r\n    case \"%\"  : return OperatorKind.REM;\r\n    case \"**\" : return OperatorKind.POW;\r\n    case \"&\"  : return OperatorKind.AND;\r\n    case \"|\"  : return OperatorKind.OR;\r\n    case \"^\"  : return OperatorKind.XOR;\r\n    case \"==\" : return OperatorKind.EQ;\r\n    case \"!=\" : return OperatorKind.NE;\r\n    case \">\"  : return OperatorKind.GT;\r\n    case \">=\" : return OperatorKind.GE;\r\n    case \"<\"  : return OperatorKind.LT;\r\n    case \"<=\" : return OperatorKind.LE;\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** ArrayBufferView prototype reference. */\r\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  resolvedThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  resolvedElementExpression : Expression | null = null;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        let element = this.elementsLookup.get(name); // TODO: error? has no source range\r\n        if (element) this.elementsLookup.set(alias, element);\r\n      }\r\n    }\r\n\r\n    // register 'Array'\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register 'ArrayBufferView'\r\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\r\n    if (arrayBufferViewPrototype) {\r\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\r\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\r\n    }\r\n\r\n    // register 'String'\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.name.kind == NodeKind.IDENTIFIER) {\r\n        let name = (<IdentifierExpression>decorator.name).text;\r\n        let kind = stringToDecoratorKind(name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, name\r\n            );\r\n          } else if (presentFlags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, name\r\n            );\r\n          } else {\r\n            presentFlags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n      // TBD: no need to mark as MODULE_EXPORT\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.OPERATOR |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              let kind = operatorKindFromString((<StringLiteralExpression>firstArg).value);\r\n              if (kind == OperatorKind.INVALID) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  firstArg.range\r\n                );\r\n              } else {\r\n                let overloads = classPrototype.overloadPrototypes;\r\n                if (overloads.has(kind)) {\r\n                  this.error(\r\n                    DiagnosticCode.Duplicate_function_implementation,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  prototype.operatorKind = kind;\r\n                  overloads.set(kind, prototype);\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      declaration.name.text,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators,\r\n              DecoratorFlags.GLOBAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameterTypes;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // ENUMVALUE\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // LOCAL\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.parent) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return element; // LOCAL\r\n          }\r\n        } while (namespace = namespace.parent);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let classReference = (<VariableLikeElement>target).type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        let member: Element | null;\r\n        if (members && (member = members.get(propertyName))) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = null;\r\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            elementAccess.range, (<Class>target).internalName\r\n          );\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        if (target = returnType.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      targetExpression.range\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.resolvedThisExpression = expression;\r\n            this.resolvedElementExpression = null;\r\n            return this.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            targetExpression.range, target.internalName\r\n          );\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 13,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 14,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 15,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is an operator overload. */\r\n  OPERATOR = 1 << 1,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 2,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 3,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 4\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR: return DecoratorFlags.OPERATOR;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameterTypes;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(\r\n      this,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(this.classPrototype);\r\n\r\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\r\n\r\n    var simpleName = this.simpleName;\r\n    var partialKey = typesToString(classTypeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      this.declaration,\r\n      classPrototype,\r\n      this.decoratorFlags\r\n    );\r\n    partialPrototype.flags = this.flags;\r\n    partialPrototype.operatorKind = this.operatorKind;\r\n    partialPrototype.classTypeArguments = classTypeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = this.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = this.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) this.breakStack = [ id ];\r\n    else this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Resolve constructor\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType,\r\n                fieldDeclaration,\r\n                instance\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (partialPrototype) {\r\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n              instance.members.set(member.simpleName, partialPrototype);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, prototype] of this.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = operatorPartial.resolve(); // reports\r\n      } else {\r\n        operatorInstance = prototype.resolve(); // reports\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9,\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 10,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 11,\r\n  /** This branch returns a properly wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 12\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    parentFlow.wrappedLocals = i64_new(0);\r\n    parentFlow.wrappedLocalsExt = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate conditionaal flags to parent\r\n    if (this.is(FlowFlags.RETURNS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (this.is(FlowFlags.THROWS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (this.is(FlowFlags.ALLOCATES)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the local with the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    var map: I64;\r\n    var ext: I64[] | null;\r\n    if (index < 64) {\r\n      if (index < 0) return true; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else if (ext = this.wrappedLocalsExt) {\r\n      let i = ((index - 64) / 64) | 0;\r\n      if (i >= ext.length) return false;\r\n      map = ext[i];\r\n      index -= (i + 1) * 64;\r\n    } else {\r\n      return false;\r\n    }\r\n    return i64_ne(\r\n      i64_and(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      ),\r\n      i64_zero\r\n    );\r\n  }\r\n\r\n  /** Sets if the local with the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    var map: I64;\r\n    var off: i32 = -1;\r\n    if (index < 64) {\r\n      if (index < 0) return; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else {\r\n      let ext = this.wrappedLocalsExt;\r\n      off = ((index - 64) / 64) | 0;\r\n      if (!ext) {\r\n        this.wrappedLocalsExt = ext = new Array(off + 1);\r\n        ext.length = 0;\r\n      }\r\n      while (ext.length <= off) ext.push(i64_new(0));\r\n      map = ext[off];\r\n      index -= (off + 1) * 64;\r\n    }\r\n    map = wrapped\r\n      ? i64_or(\r\n          map,\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      : i64_and(\r\n          map,\r\n          i64_not(\r\n            i64_shl(\r\n              i64_one,\r\n              i64_new(index)\r\n            )\r\n          )\r\n        );\r\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\r\n    else this.wrappedLocals = map;\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. on inner block). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (\r\n      FlowFlags.RETURNS |\r\n      FlowFlags.RETURNS_WRAPPED |\r\n      FlowFlags.THROWS |\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.ALLOCATES\r\n    );\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. on then/else branches). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // flags set in both arms\r\n    this.flags |= left.flags & right.flags & (\r\n      FlowFlags.RETURNS |\r\n      FlowFlags.RETURNS_WRAPPED |\r\n      FlowFlags.THROWS |\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.ALLOCATES\r\n    );\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(\r\n      left.wrappedLocals,\r\n      right.wrappedLocals\r\n    );\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possibly combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let currentFunction = this.currentFunction;\r\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !currentFunction.flow.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: {\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // never overflows because globals are wrapped on set\r\n      case ExpressionId.GetGlobal: return false;\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        // actually, brs with a value that'd be handled here is not emitted atm\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.currentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  var fromSize = fromType.byteSize;\r\n  var toSize = toType.byteSize;\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromSize > toSize\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private cachedByValue: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.cachedByValue = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunctionType(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocPtrArray(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  private cachedTemporaryName: usize = 0;\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.cachedTemporaryName;\r\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = assert(this.cachedTemporaryName);\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocPtrArray(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeName: usize = 0;\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeFunction(func: FunctionRef): void {\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      let name = allocString(\"precompute\");\r\n      this.cachedPrecomputeName = name;\r\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.cachedByValue;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    free_memory(this.cachedByValue);\r\n    free_memory(this.cachedTemporaryName);\r\n    free_memory(this.cachedPrecomputeName);\r\n    free_memory(this.cachedPrecomputeNames);\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameterTypes = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = expression.kind == NodeKind.IDENTIFIER\r\n      ? stringToDecoratorKind((<IdentifierExpression>expression).text)\r\n      : DecoratorKind.CUSTOM;\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameterTypes: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE\r\n}\r\n\r\n/** Returns the decorator kind represented by the specified string. */\r\nexport function stringToDecoratorKind(str: string): DecoratorKind {\r\n  switch (str) {\r\n    case \"global\": return DecoratorKind.GLOBAL;\r\n    case \"operator\": return DecoratorKind.OPERATOR;\r\n    case \"unmanaged\": return DecoratorKind.UNMANAGED;\r\n    case \"sealed\": return DecoratorKind.SEALED;\r\n    case \"inline\": return DecoratorKind.INLINE;\r\n    default: return DecoratorKind.CUSTOM;\r\n  }\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let expression = decorators[i].name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  switch (text.length && text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\r\n  }\r\n\r\n  skipIdentifierName(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the int type of this type. Defaults to `Type.i32` if this is not an int type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.I32:\r\n      case TypeKind.I64:\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.U32:\r\n      case TypeKind.U64:\r\n      case TypeKind.USIZE: return this;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType ? \"u32\" : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType ? \"usize\" : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  File_0_not_found = 6054\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate as compileBuiltinAllocate,\r\n  compileAbort as compileBuiltinAbort\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getFunctionBody,\r\n  getGetLocalIndex\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = [];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            ConversionKind.NONE,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.parent\r\n            ? global.parent.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(\r\n            declaration.initializer,\r\n            global.type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          );\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = getExpressionType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              getConstValueI64Low(initExpr),\r\n              getConstValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return false;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n          module.addGlobalExport(internalName, mangleExportName(global));\r\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(\r\n              <Expression>valueDeclaration.value,\r\n              Type.i32,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            );\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (getExpressionType(initExpr) == NativeType.I32) {\r\n              val.constantValue = getConstValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\r\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n            module.addGlobalExport(member.internalName, mangleExportName(member));\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.internalName == \"abort\");\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching but still compile as-is\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression(\r\n          (<ExpressionStatement>body).expression,\r\n          returnType,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        flow.finalize();\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  this.makeConditionalAllocate(<Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let parent = instance.prototype.parent;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        parent\r\n          ? parent.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\r\n      if (signature.requiredParameters < signature.parameterTypes.length) {\r\n        // export the trampoline if the function takes optional parameters\r\n        instance = this.ensureTrampoline(instance);\r\n        this.ensureArgcSet();\r\n      }\r\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\r\n            let module = this.module;\r\n            let name = (<Field>element).simpleName;\r\n            let type = (<Field>element).type;\r\n            let nativeType = type.toNativeType();\r\n            let offset = (<Field>element).memoryOffset;\r\n            let usizeType = this.options.usizeType;\r\n            let nativeSizeType = this.options.nativeSizeType;\r\n\r\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\r\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\r\n            module.addFunction(\r\n              getterName,\r\n              this.ensureFunctionType(null, type, usizeType),\r\n              null,\r\n              module.createLoad(\r\n                type.byteSize,\r\n                type.is(TypeFlags.SIGNED),\r\n                module.createGetLocal(0, nativeSizeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(getterName, getterName);\r\n\r\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\r\n            if (element.is(CommonFlags.READONLY)) break;\r\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\r\n            module.addFunction(\r\n              setterName,\r\n              this.ensureFunctionType([ type ], Type.void, usizeType),\r\n              null,\r\n              module.createStore(\r\n                type.byteSize,\r\n                module.createGetLocal(0, nativeSizeType),\r\n                module.createGetLocal(1, nativeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(setterName, setterName);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    var count = 0;\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n        stmts[count++] = stmt;\r\n        if (flow.isAny(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)) break;\r\n      }\r\n    }\r\n    stmts.length = count;\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var blockFlow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = blockFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts, NativeType.None);\r\n\r\n    // Switch back to the parent flow\r\n    var parentFlow = blockFlow.leaveBranchOrScope();\r\n    this.currentFunction.flow = parentFlow;\r\n    parentFlow.inherit(blockFlow);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it?\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        flow.isAny(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : module.createNop();\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = true;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = this.precomputeExpressionRef(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : module.createNop();\r\n    var bodyExpr = this.compileStatement(statement.statement);\r\n\r\n    // Switch back to the parent flow\r\n    var parentFlow = flow.leaveBranchOrScope();\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    currentFunction.flow = parentFlow;\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      initExpr,\r\n      module.createLoop(continueLabel, module.createBlock(null, [\r\n        module.createIf(condExpr, module.createBlock(null, [\r\n          bodyExpr,\r\n          incrExpr,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint for Binaryen\r\n    if (flow.isAny(FlowFlags.RETURNS | FlowFlags.THROWS)) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueFlow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    currentFunction.flow = ifTrueFlow.leaveBranchOrScope();\r\n\r\n    var ifFalseFlow: Flow | null;\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      ifFalseFlow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      let parentFlow = ifFalseFlow.leaveBranchOrScope();\r\n      currentFunction.flow = parentFlow;\r\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    return flow.is(FlowFlags.INLINE_CONTEXT)\r\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\r\n      : module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let fallsThrough = i != numCases - 1;\r\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (flow.is(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)) break;\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) alwaysReturns = false; // ignore fall-throughs\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS_WRAPPED))) alwaysReturnsWrapped = false; // ignore fall-throughs\r\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) alwaysThrows = false;\r\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) alwaysAllocates = false;\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope();\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileBuiltinAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.precomputeExpressionRef(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(getConstValueI32(initExpr), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  getConstValueI64Low(initExpr),\r\n                  getConstValueI64High(initExpr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\r\n        } else {\r\n          local = currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          flow.isAny(FlowFlags.CONTINUES | FlowFlags.BREAKS | FlowFlags.RETURNS)\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = getFunctionBody(funcRef);\r\n    module.removeTemporaryFunction();\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EQUALS_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EXCLAMATION_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.POW);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.REM);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.WRAP); // !\r\n        leftType = this.currentType; // ^ must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.WRAP);\r\n        leftType = this.currentType; // ^ clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: operator overload?\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.AND);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.OR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.XOR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n      // checks and recompiles the argument according to its actual annotated type\r\n      var argumentExpressions: Expression[];\r\n      var thisArg: ExpressionRef = 0;\r\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n        let parent = assert(operatorInstance.parent);\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        thisArg = this.compileExpression(value, (<Class>parent).type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        argumentExpressions = [];\r\n      } else {\r\n        argumentExpressions = [ value ];\r\n      }\r\n      return this.compileCallDirect(\r\n        operatorInstance,\r\n        argumentExpressions,\r\n        reportNode,\r\n        thisArg,\r\n        operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n      );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // checks and recompiles the arguments according to their actual annotated types\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = this.compileExpression(left, (<Class>parent).type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ];\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var target = program.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var elementType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>target).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (program.resolvedElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          elementType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let flow = this.currentFunction.flow;\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.program.resolvedThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let currentFunction = this.currentFunction;\r\n          let flow = currentFunction.flow;\r\n          let tempLocal = currentFunction.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.program.resolvedThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.program.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let currentFunction = this.currentFunction;\r\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\r\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = prototype.resolveUsingTypeArguments( // reports\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameterTypes;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameterTypes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.program.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments,\r\n                true\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = prototype.resolve(\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = prototype.resolve(\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.program.resolvedThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var expr = compileBuiltinCall( // reports\r\n      this,\r\n      prototype,\r\n      prototype.resolveBuiltinTypeArguments(\r\n        expression.typeArguments,\r\n        this.currentFunction.flow.contextualTypeArguments\r\n      ),\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(thisArg),\r\n          (<Class>parent).type,\r\n          \"this\"\r\n        );\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n        // inherits wrap status\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          parameterTypes[i],\r\n          signature.getParameterName(i),\r\n          !flow.canOverflow(paramExpr, parameterTypes[i])\r\n        );\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameterTypes[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        parameterTypes[i],\r\n        signature.getParameterName(i),\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        let stmt = this.compileStatement(statements[i]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          body.push(stmt);\r\n          if (flow.is(FlowFlags.RETURNS)) break;\r\n        }\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches return\r\n    if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            assert(originalParameterDeclarations[minArguments + i].initializer),\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        )\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameterTypes;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = assert(parameterNodes[i].initializer);\r\n        if (initializer.kind != NodeKind.LITERAL) {\r\n          // TODO: other kinds might be constant as well\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\r\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    return ret;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>target).type;\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>target).resolve(\r\n          null,\r\n          currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayInstance) return module.createUnreachable();\r\n    var arrayType = arrayInstance.type;\r\n\r\n    var elementCount = expressions.length;\r\n    if (elementCount) { // non-empty static or dynamic\r\n      let nativeElementType = elementType.toNativeType();\r\n      let values: usize;\r\n      let byteLength: usize;\r\n      switch (nativeElementType) {\r\n        case NativeType.I32: {\r\n          values = changetype<usize>(new Int32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          values = changetype<usize>(new Array<I64>(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          values = changetype<usize>(new Float32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          values = changetype<usize>(new Float64Array(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // precompute value expressions\r\n      let exprs = new Array<ExpressionRef>(elementCount);\r\n      let expr: BinaryenExpressionRef;\r\n      for (let i = 0; i < elementCount; ++i) {\r\n        exprs[i] = expressions[i]\r\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          : elementType.toNativeZero(module);\r\n        if (isStatic) {\r\n          expr = this.precomputeExpressionRef(exprs[i]);\r\n          if (getExpressionId(expr) == ExpressionId.Const) {\r\n            assert(getExpressionType(expr) == nativeElementType);\r\n            switch (nativeElementType) {\r\n              case NativeType.I32: {\r\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                changetype<I64[]>(values)[i] = i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\r\n                break;\r\n              }\r\n              default: assert(false); // checked above\r\n            }\r\n          } else {\r\n            // TODO: emit a warning if declared 'const'\r\n            // if (isConst) {\r\n            //   this.warn(\r\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n            //     reportNode.range\r\n            //   );\r\n            // }\r\n            isStatic = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      let usizeTypeSize = this.options.usizeType.byteSize;\r\n      if (isStatic) { // non-empty, all elements can be precomputed\r\n\r\n        // Create a combined static memory segment composed of:\r\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\r\n\r\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\r\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\r\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\r\n        let data = new Uint8Array(arraySize + bufferTotalSize);\r\n        let segment = this.addMemorySegment(data);\r\n        let offset = 0;\r\n\r\n        // write Array struct\r\n        if (usizeTypeSize == 8) {\r\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\r\n          offset += 8;\r\n        } else {\r\n          assert(i64_high(segment.offset) == 0);\r\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\r\n          offset += 4;\r\n        }\r\n        writeI32(elementCount, data, offset); // length_\r\n        offset += 4;\r\n        assert(offset == arraySize);\r\n\r\n        // write ArrayBuffer struct\r\n        writeI32(byteLength, data, offset);\r\n        offset += bufferHeaderSize; // incl. alignment\r\n\r\n        // write ArrayBuffer data\r\n        switch (nativeElementType) {\r\n          case NativeType.I32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        assert(offset <= arraySize + bufferTotalSize);\r\n\r\n        this.currentType = arrayType;\r\n        return usizeTypeSize == 8\r\n          ? module.createI64(\r\n              i64_low(segment.offset),\r\n              i64_high(segment.offset)\r\n            )\r\n          : module.createI32(\r\n              i64_low(segment.offset)\r\n            );\r\n\r\n      } else { // non-empty, some elements can't be precomputed\r\n\r\n        this.currentType = arrayType;\r\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n        if (!setter) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n            reportNode.range, arrayInstance.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let nativeArrayType = arrayType.toNativeType();\r\n        let currentFunction = this.currentFunction;\r\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\r\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\r\n        let index = 0;\r\n        stmts[index++] = module.createSetLocal(tempLocal.index,\r\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n            module.createI32(0), // this\r\n            module.createI32(elementCount)\r\n          ])\r\n        );\r\n        for (let i = 0; i < elementCount; ++i) {\r\n          stmts[index++] = this.makeCallDirect(setter, [\r\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n            module.createI32(i),\r\n            exprs[i]\r\n          ]);\r\n        }\r\n        assert(index + 1 == stmts.length);\r\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n        currentFunction.freeTempLocal(tempLocal);\r\n        this.currentType = arrayType;\r\n        return module.createBlock(null, stmts, nativeArrayType);\r\n      }\r\n\r\n    } else { // empty, TBD: cache this somehow?\r\n      this.currentType = arrayType;\r\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(0)\r\n      ]);\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n      expression.typeArguments,\r\n      currentFunction.flow.contextualTypeArguments,\r\n      expression\r\n    );\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the first matching constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n    }\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = this.makeAllocate(classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(program.resolvedThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.parent);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n    var ifThenType: Type;\r\n    var ifElseType: Type;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n      ifThenType = this.currentType;\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n      ifElseType = this.currentType;\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n      ifThenType = this.currentType;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n      ifElseType = this.currentType;\r\n    }\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) {\r\n      // shortcut if compiling the getter already failed\r\n      return getValue;\r\n    }\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        module.createBinary(op,\r\n          getValue,\r\n          nativeOne\r\n        ),\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\r\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      ),\r\n      false\r\n    );\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            WrapMode.NONE\r\n          );\r\n          switch (this.currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.U32:\r\n            case TypeKind.BOOL: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                this.currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              expr = module.createUnreachable();\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFunction.flow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0x1)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation expression for an instance of the specified class. */\r\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\r\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\r\n    var initializers = new Array<ExpressionRef>();\r\n    initializers.push(\r\n      module.createSetLocal(tempLocal.index,\r\n        compileBuiltinAllocate(this, classInstance, reportNode)\r\n      )\r\n    );\r\n\r\n    // apply field initializers\r\n    if (classInstance.members) {\r\n      for (let member of classInstance.members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let field = <Field>member;\r\n          let fieldType = field.type;\r\n          let nativeFieldType = fieldType.toNativeType();\r\n          let fieldDeclaration = field.prototype.declaration;\r\n          assert(!field.isAny(CommonFlags.CONST));\r\n          if (fieldDeclaration.initializer) { // use initializer\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              this.compileExpression( // reports\r\n                fieldDeclaration.initializer,\r\n                fieldType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              ),\r\n              nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          } else { // initialize with zero\r\n            // TODO: might be unnecessary if the ctor initializes the field\r\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              parameterIndex >= 0 // initialized via parameter\r\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n                : fieldType.toNativeZero(module),\r\n                nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // return `this`\r\n    initializers.push(\r\n      module.createGetLocal(tempLocal.index, nativeSizeType)\r\n    );\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = classInstance.type;\r\n    return module.createBlock(null, initializers, nativeSizeType);\r\n  }\r\n\r\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    // requires that `this` is the first local\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    this.currentType = classInstance.type;\r\n    return module.createIf(\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(\r\n            BinaryOp.NeI64,\r\n            module.createGetLocal(0, NativeType.I64),\r\n            module.createI64(0)\r\n          )\r\n        : module.createGetLocal(0, NativeType.I32),\r\n      module.createGetLocal(0, nativeSizeType),\r\n      module.createTeeLocal(0,\r\n        this.makeAllocate(classInstance, reportNode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var currentFunction = this.currentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    currentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\r\n  switch (element.kind) {\r\n    case ElementKind.FUNCTION: {\r\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    case ElementKind.FIELD: {\r\n      let parent = assert((<Field>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.ENUMVALUE: {\r\n      let parent = assert((<EnumValue>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.CLASS: {\r\n      let parent = (<Class>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    default: {\r\n      let parent = element.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var program = this.program;\r\n\r\n    // check if already parsed\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].internalPath == internalPath) return;\r\n    }\r\n    this.seenlog.add(internalPath);\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        tn.next();\r\n        flags |= CommonFlags.ABSTRACT;\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(tn.pos), \"class\"\r\n          );\r\n          break;\r\n        }\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        tn.next();\r\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        tn.next();\r\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // 'void'\r\n    if (token == Token.VOID) {\r\n      return Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor);\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"public\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"protected\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PROTECTED;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"private\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PRIVATE;\r\n    }\r\n    if (tn.skip(Token.READONLY)) {\r\n      if (!startRange) startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"readonly\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.READONLY;\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        null,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath != null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifierName()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseImportDeclaration(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifierName()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else assert(false);\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(\"get \");\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n    } else if (element.is(CommonFlags.SET)) {\r\n      sb.push(\"set \");\r\n      sb.push(element.prototype.declaration.name.text);\r\n    } else {\r\n      if (!element.is(CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) {\r\n        sb.push(\"abstract \");\r\n      }\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    /* TBD: the compiler implicitly generates setters if the class is exported\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"get \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(): \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    if (!element.is(CommonFlags.READONLY)) {\r\n      indent(sb, this.indentLevel);\r\n      if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n      if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n      if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n      sb.push(\"set \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\"(\");\r\n      sb.push(element.simpleName);\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(element.type));\r\n      sb.push(\");\\n\");\r\n    }\r\n    */\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags\r\n} from \"./program\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n          ret = module.createSelect( // x > 0 ? x : 0-x\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFunction.flow;\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0)) return 0;\r\n\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\r\n    HEAP.copyWithin(dest, src, src + size);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, value, offset) {\r\n    HEAP[ptr + (offset | 0)] = value;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr, offset) {\r\n    return HEAP[ptr + (offset | 0)];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"unchecked\"] = function(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}